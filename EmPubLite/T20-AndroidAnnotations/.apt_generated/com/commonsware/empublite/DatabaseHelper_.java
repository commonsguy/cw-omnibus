//
// DO NOT EDIT THIS FILE, IT HAS BEEN GENERATED USING AndroidAnnotations 3.0.1.
//


package com.commonsware.empublite;

import android.content.Context;
import android.os.Handler;
import android.os.Looper;
import com.commonsware.empublite.DatabaseHelper.NoteListener;
import org.androidannotations.api.BackgroundExecutor;
import org.androidannotations.api.view.OnViewChangedNotifier;

public final class DatabaseHelper_
    extends DatabaseHelper
{

    private Context context_;
    private static DatabaseHelper_ instance_;
    private Handler handler_ = new Handler(Looper.getMainLooper());

    private DatabaseHelper_(Context context) {
        super(context);
        context_ = context;
    }

    public static DatabaseHelper_ getInstance_(Context context) {
        if (instance_ == null) {
            OnViewChangedNotifier previousNotifier = OnViewChangedNotifier.replaceNotifier(null);
            instance_ = new DatabaseHelper_(context.getApplicationContext());
            instance_.init_();
            OnViewChangedNotifier.replaceNotifier(previousNotifier);
        }
        return instance_;
    }

    private void init_() {
        context = context_;
    }

    @Override
    public void setNoteAsync(final NoteListener listener, final String prose) {
        handler_.post(new Runnable() {


            @Override
            public void run() {
                DatabaseHelper_.super.setNoteAsync(listener, prose);
            }

        }
        );
    }

    @Override
    public void saveNoteAsync(final int position, final String prose) {
        BackgroundExecutor.execute(new BackgroundExecutor.Task("", 0, "") {


            @Override
            public void execute() {
                try {
                    DatabaseHelper_.super.saveNoteAsync(position, prose);
                } catch (Throwable e) {
                    Thread.getDefaultUncaughtExceptionHandler().uncaughtException(Thread.currentThread(), e);
                }
            }

        }
        );
    }

    @Override
    public void getNoteAsync(final int position, final NoteListener listener) {
        BackgroundExecutor.execute(new BackgroundExecutor.Task("", 0, "") {


            @Override
            public void execute() {
                try {
                    DatabaseHelper_.super.getNoteAsync(position, listener);
                } catch (Throwable e) {
                    Thread.getDefaultUncaughtExceptionHandler().uncaughtException(Thread.currentThread(), e);
                }
            }

        }
        );
    }

    @Override
    public void deleteNoteAsync(final int position) {
        BackgroundExecutor.execute(new BackgroundExecutor.Task("", 0, "") {


            @Override
            public void execute() {
                try {
                    DatabaseHelper_.super.deleteNoteAsync(position);
                } catch (Throwable e) {
                    Thread.getDefaultUncaughtExceptionHandler().uncaughtException(Thread.currentThread(), e);
                }
            }

        }
        );
    }

}
